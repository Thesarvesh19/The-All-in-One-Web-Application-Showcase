// Immediately check for a saved theme in localStorage and apply it
(function() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.documentElement.classList.add('dark-mode');
    }
})();


document.addEventListener('DOMContentLoaded', () => {

    const translations = {
        en: {
            'nav-logo': 'Creations',
            'nav-home': 'Home',
            'nav-p1': 'Responsive Grid',
            'nav-p2': 'Brain Teaser',
            'nav-p3': 'Joke Factory',
            'hero-title': 'Welcome to My Interactive Showcase',
            'hero-subtitle': 'Explore three unique projects demonstrating modern web development techniques.',
            'hero-btn1': 'Responsive Grid',
            'hero-btn2': 'Brain Teaser',
            'hero-btn3': 'Joke Factory',
            'p1-desc': 'A fluid layout that adapts to any screen size.',
            'p2-desc': 'Test your knowledge with this fun, interactive quiz.',
            'p3-desc': 'Fetches random jokes from a live API for endless humor.',
            'p1-title': 'Project 1: Responsive Grid',
            'p1-card1-title': 'Mobile First',
            'p1-card1-desc': 'On small screens, cards stack vertically for easy reading.',
            'p1-card2-title': 'Tablet View',
            'p1-card2-desc': 'On medium screens, they arrange into a neat two-column layout.',
            'p1-card3-title': 'Desktop Power',
            'p1-card3-desc': 'On large screens, all three cards line up for a full view.',
            'p2-title': 'Project 2: Brain Teaser üß†',
            'quiz-question-placeholder': 'Question text goes here',
            'quiz-complete': 'Quiz Complete!',
            'quiz-final-score': 'Your final score is',
            'quiz-play-again': 'Play Again',
            'p3-title': 'Project 3: Joke Factory üòÇ',
            'p3-fetch-btn': 'Tell Me a Joke!',
            'p3-joke-placeholder': 'Click the button to get a random joke!',
            'joke-fetching': 'Fetching a hilarious joke...',
            'joke-error': 'Oops! The jokes are sleeping.',
            'footer-copyright': `¬© ${new Date().getFullYear()} Creations. All Rights Reserved.`,
            'footer-designed': 'Designed with ‚ù§Ô∏è by Sarvesh Soumil',
            'congrats-title': 'Congratulations!',
            'congrats-text': 'You got a perfect score! Well done!',
            'congrats-close': 'Close'
        },
        hi: {
            'nav-logo': '‡§∞‡§ö‡§®‡§æ‡§è‡§Å',
            'nav-home': '‡§π‡•ã‡§Æ',
            'nav-p1': '‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏‡§ø‡§µ ‡§ó‡•ç‡§∞‡§ø‡§°',
            'nav-p2': '‡§¨‡•ç‡§∞‡•á‡§® ‡§ü‡•Ä‡§ú‡§º‡§∞',
            'nav-p3': '‡§ú‡•ã‡§ï ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä',
            'hero-title': '‡§Æ‡•á‡§∞‡•á ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§∂‡•ã‡§ï‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
            'hero-subtitle': '‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§µ‡•á‡§¨ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§§‡•Ä‡§® ‡§Ö‡§®‡•Ç‡§†‡•Ä ‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§',
            'hero-btn1': '‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏‡§ø‡§µ ‡§ó‡•ç‡§∞‡§ø‡§°',
            'hero-btn2': '‡§¨‡•ç‡§∞‡•á‡§® ‡§ü‡•Ä‡§ú‡§º‡§∞',
            'hero-btn3': '‡§ú‡•ã‡§ï ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä',
            'p1-desc': '‡§è‡§ï ‡§§‡§∞‡§≤ ‡§≤‡•á‡§Ü‡§â‡§ü ‡§ú‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§Ü‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§',
            'p2-desc': '‡§á‡§∏ ‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞, ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§ï‡•ç‡§µ‡§ø‡§ú ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•á ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§',
            'p3-desc': '‡§Ö‡§Ç‡§§‡§π‡•Ä‡§® ‡§π‡§æ‡§∏‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§æ‡§á‡§µ ‡§è‡§™‡•Ä‡§Ü‡§à ‡§∏‡•á ‡§Ø‡§æ‡§¶‡•É‡§ö‡•ç‡§õ‡§ø‡§ï ‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§',
            'p1-title': '‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü 1: ‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏‡§ø‡§µ ‡§ó‡•ç‡§∞‡§ø‡§°',
            'p1-card1-title': '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§´‡§∞‡•ç‡§∏‡•ç‡§ü',
            'p1-card1-desc': '‡§õ‡•ã‡§ü‡•Ä ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞, ‡§ï‡§æ‡§∞‡•ç‡§° ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§Ç‡§¨‡§µ‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¢‡•á‡§∞ ‡§π‡•ã ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§',
            'p1-card2-title': '‡§ü‡•à‡§¨‡§≤‡•á‡§ü ‡§µ‡•ç‡§Ø‡•Ç',
            'p1-card2-desc': '‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞, ‡§µ‡•á ‡§è‡§ï ‡§∏‡§æ‡§´-‡§∏‡•Å‡§•‡§∞‡•á ‡§¶‡•ã-‡§ï‡•â‡§≤‡§Æ ‡§≤‡•á‡§Ü‡§â‡§ü ‡§Æ‡•á‡§Ç ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§',
            'p1-card3-title': '‡§°‡•á‡§∏‡•ç‡§ï‡§ü‡•â‡§™ ‡§™‡§æ‡§µ‡§∞',
            'p1-card3-desc': '‡§¨‡§°‡§º‡•Ä ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞, ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§¶‡•É‡§∂‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•Ä‡§®‡•ã‡§Ç ‡§ï‡§æ‡§∞‡•ç‡§° ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø‡§¨‡§¶‡•ç‡§ß ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§',
            'p2-title': '‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü 2: ‡§¨‡•ç‡§∞‡•á‡§® ‡§ü‡•Ä‡§ú‡§º‡§∞ üß†',
            'quiz-question-placeholder': '‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§è‡§ó‡§æ',
            'quiz-complete': '‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!',
            'quiz-final-score': '‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§π‡•à',
            'quiz-play-again': '‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ñ‡•á‡§≤‡•á‡§Ç',
            'p3-title': '‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü 3: ‡§ú‡•ã‡§ï ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä üòÇ',
            'p3-fetch-btn': '‡§Æ‡•Å‡§ù‡•á ‡§è‡§ï ‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡§æ ‡§∏‡•Å‡§®‡§æ‡§ì!',
            'p3-joke-placeholder': '‡§è‡§ï ‡§Ø‡§æ‡§¶‡•É‡§ö‡•ç‡§õ‡§ø‡§ï ‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡§æ ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç!',
            'joke-fetching': '‡§è‡§ï ‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡§æ ‡§≤‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...',
            'joke-error': '‡§â‡§´‡§º! ‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡•á ‡§∏‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§',
            'footer-copyright': `¬© ${new Date().getFullYear()} ‡§∞‡§ö‡§®‡§æ‡§è‡§Å‡•§ ‡§∏‡§∞‡•ç‡§µ‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§‡•§`,
            'footer-designed': '‡§∏‡§∞‡•ç‡§µ‡•á‡§∂ ‡§∏‡•å‡§Æ‡§ø‡§≤ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‚ù§Ô∏è ‡§ï‡•á ‡§∏‡§æ‡§• ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ',
            'congrats-title': '‡§¨‡§ß‡§æ‡§à ‡§π‡•ã!',
            'congrats-text': '‡§Ü‡§™‡§®‡•á ‡§â‡§§‡•ç‡§§‡§Æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§Ø‡§æ! ‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ!',
            'congrats-close': '‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç'
        }
    };

    const quizQuestions = {
        en: [
            { question: "What is the largest mammal in the world?", answers: [{ text: "Elephant", correct: false }, { text: "Blue Whale", correct: true }, { text: "Giraffe", correct: false }, { text: "Great White Shark", correct: false }] },
            { question: "Which planet is known as the Red Planet?", answers: [{ text: "Venus", correct: false }, { text: "Jupiter", correct: false }, { text: "Mars", correct: true }, { text: "Saturn", correct: false }] },
            { question: "Who wrote 'Romeo and Juliet'?", answers: [{ text: "Charles Dickens", correct: false }, { text: "William Shakespeare", correct: true }, { text: "Jane Austen", correct: false }, { text: "Mark Twain", correct: false }] },
            { question: "What is the capital of Japan?", answers: [{ text: "Beijing", correct: false }, { text: "Seoul", correct: false }, { text: "Tokyo", correct: true }, { text: "Bangkok", correct: false }] },
            { question: "What element does 'O' represent on the periodic table?", answers: [{ text: "Gold", correct: false }, { text: "Oxygen", correct: true }, { text: "Osmium", correct: false }, { text: "Oganesson", correct: false }] },
            { question: "Which is the longest river in the world?", answers: [{ text: "Amazon", correct: false }, { text: "Yangtze", correct: false }, { text: "Mississippi", correct: false }, { text: "Nile", correct: true }] },
            { question: "Who is the designer and owner of this web page?", answers: [{ text: "Elon Musk", correct: false }, { text: "Bill Gates", correct: false }, { text: "Sarvesh Soumil", correct: true }, { text: "Jeff Bezos", correct: false }] }
        ],
        hi: [
            { question: "‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§∏‡•ç‡§§‡§®‡§™‡§æ‡§Ø‡•Ä ‡§ï‡•å‡§® ‡§∏‡§æ ‡§π‡•à?", answers: [{ text: "‡§π‡§æ‡§•‡•Ä", correct: false }, { text: "‡§¨‡•ç‡§≤‡•Ç ‡§µ‡•ç‡§π‡•á‡§≤", correct: true }, { text: "‡§ú‡§ø‡§∞‡§æ‡§´‡§º", correct: false }, { text: "‡§ó‡•ç‡§∞‡•á‡§ü ‡§µ‡•ç‡§π‡§æ‡§á‡§ü ‡§∂‡§æ‡§∞‡•ç‡§ï", correct: false }] },
            { question: "‡§ï‡§ø‡§∏ ‡§ó‡•ç‡§∞‡§π ‡§ï‡•ã ‡§≤‡§æ‡§≤ ‡§ó‡•ç‡§∞‡§π ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§ú‡§æ‡§®‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à?", answers: [{ text: "‡§∂‡•Å‡§ï‡•ç‡§∞", correct: false }, { text: "‡§¨‡•É‡§π‡§∏‡•ç‡§™‡§§‡§ø", correct: false }, { text: "‡§Æ‡§Ç‡§ó‡§≤", correct: true }, { text: "‡§∂‡§®‡§ø", correct: false }] },
            { question: " '‡§∞‡•ã‡§Æ‡§ø‡§Ø‡•ã ‡§î‡§∞ ‡§ú‡•Ç‡§≤‡§ø‡§Ø‡§ü' ‡§ï‡§ø‡§∏‡§®‡•á ‡§≤‡§ø‡§ñ‡§æ?", answers: [{ text: "‡§ö‡§æ‡§∞‡•ç‡§≤‡•ç‡§∏ ‡§°‡§ø‡§ï‡•á‡§Ç‡§∏", correct: false }, { text: "‡§µ‡§ø‡§≤‡§ø‡§Ø‡§Æ ‡§∂‡•á‡§ï‡•ç‡§∏‡§™‡§ø‡§Ø‡§∞", correct: true }, { text: "‡§ú‡•á‡§® ‡§ë‡§∏‡•ç‡§ü‡•á‡§®", correct: false }, { text: "‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§ü‡•ç‡§µ‡•á‡§®", correct: false }] },
            { question: "‡§ú‡§æ‡§™‡§æ‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§ú‡§ß‡§æ‡§®‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?", answers: [{ text: "‡§¨‡•Ä‡§ú‡§ø‡§Ç‡§ó", correct: false }, { text: "‡§∏‡§ø‡§Ø‡•ã‡§≤", correct: false }, { text: "‡§ü‡•ã‡§ï‡•ç‡§Ø‡•ã", correct: true }, { text: "‡§¨‡•à‡§Ç‡§ï‡•â‡§ï", correct: false }] },
            { question: "‡§Ü‡§µ‡§∞‡•ç‡§§ ‡§∏‡§æ‡§∞‡§£‡•Ä ‡§™‡§∞ 'O' ‡§ï‡§ø‡§∏ ‡§§‡§§‡•ç‡§µ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§®‡§ø‡§ß‡§ø‡§§‡•ç‡§µ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?", answers: [{ text: "‡§∏‡•ã‡§®‡§æ", correct: false }, { text: "‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ú‡§®", correct: true }, { text: "‡§ë‡§∏‡•ç‡§Æ‡§ø‡§Ø‡§Æ", correct: false }, { text: "‡§ì‡§ó‡•á‡§®‡•á‡§∏‡§®", correct: false }] },
            { question: "‡§µ‡§ø‡§∂‡•ç‡§µ ‡§ï‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä ‡§®‡§¶‡•Ä ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§π‡•à?", answers: [{ text: "‡§Ö‡§Æ‡•á‡§ú‡§º‡•Ö‡§®", correct: false }, { text: "‡§Ø‡§æ‡§Ç‡§ó‡•ç‡§§‡•ç‡§ú‡§º‡•Ä", correct: false }, { text: "‡§Æ‡§ø‡§∏‡§ø‡§∏‡§ø‡§™‡•Ä", correct: false }, { text: "‡§®‡•Ä‡§≤", correct: true }] },
            { question: "‡§á‡§∏ ‡§µ‡•á‡§¨ ‡§™‡•á‡§ú ‡§ï‡•á ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®‡§∞ ‡§î‡§∞ ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•å‡§® ‡§π‡•à‡§Ç?", answers: [{ text: "‡§è‡§≤‡•ã‡§® ‡§Æ‡§∏‡•ç‡§ï", correct: false }, { text: "‡§¨‡§ø‡§≤ ‡§ó‡•á‡§ü‡•ç‡§∏", correct: false }, { text: "‡§∏‡§∞‡•ç‡§µ‡•á‡§∂ ‡§∏‡•å‡§Æ‡§ø‡§≤", correct: true }, { text: "‡§ú‡•á‡§´ ‡§¨‡•á‡§ú‡•ã‡§∏", correct: false }] }
        ]
    };

    const navLinks = document.querySelectorAll('.nav-link');
    const pageSections = document.querySelectorAll('.page-section');

    function showPage(targetId) {
        pageSections.forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(targetId).classList.add('active');
        navLinks.forEach(link => {
            link.classList.remove('active');
        });
        document.querySelectorAll(`.nav-link[data-target="${targetId}"]`).forEach(link => {
            link.classList.add('active');
        });
    }

    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = e.currentTarget.dataset.target;
            showPage(targetId);
        });
    });

    const languageToggle = document.getElementById('language-toggle');
    let currentLanguage = 'en';

    function translatePage() {
        document.querySelectorAll('[data-translate-key]').forEach(element => {
            const key = element.dataset.translateKey;
            if (translations[currentLanguage][key]) {
                element.textContent = translations[currentLanguage][key];
            }
        });
        startQuiz();
    }

    languageToggle.addEventListener('change', (e) => {
        currentLanguage = e.target.checked ? 'hi' : 'en';
        translatePage();
    });
    
    const themeToggle = document.getElementById('theme-toggle');
    themeToggle.addEventListener('click', () => {
        document.documentElement.classList.toggle('dark-mode');
        
        // Save theme preference to localStorage
        if (document.documentElement.classList.contains('dark-mode')) {
            localStorage.setItem('theme', 'dark');
        } else {
            localStorage.setItem('theme', 'light');
        }
    });

    const questionElement = document.getElementById('question');
    const answerButtonsElement = document.getElementById('answer-buttons');
    const quizBox = document.getElementById('quiz-box');
    const resultBox = document.getElementById('result-box');
    const scoreElement = document.getElementById('score');
    const restartBtn = document.getElementById('restart-btn');
    const congratsModal = document.getElementById('congrats-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    let currentQuestionIndex;
    let score;

    function startQuiz() {
        currentQuestionIndex = 0;
        score = 0;
        resultBox.classList.add('hidden');
        quizBox.classList.remove('hidden');
        congratsModal.classList.add('hidden');
        showQuestion();
    }

    function showQuestion() {
        resetState();
        let currentQuestion = quizQuestions[currentLanguage][currentQuestionIndex];
        questionElement.innerText = currentQuestion.question;
        currentQuestion.answers.forEach(answer => {
            const button = document.createElement('button');
            button.innerText = answer.text;
            button.classList.add('btn');
            if (answer.correct) {
                button.dataset.correct = "true";
            }
            button.addEventListener('click', selectAnswer);
            answerButtonsElement.appendChild(button);
        });
    }

    function resetState() {
        while (answerButtonsElement.firstChild) {
            answerButtonsElement.removeChild(answerButtonsElement.firstChild);
        }
    }

    function selectAnswer(e) {
        const selectedBtn = e.target;
        const isCorrect = selectedBtn.dataset.correct === "true";

        if (isCorrect) {
            score++;
        }
        selectedBtn.classList.add(isCorrect ? 'correct' : 'wrong');
        Array.from(answerButtonsElement.children).forEach(button => {
            if (button.dataset.correct === "true") {
                button.classList.add('correct');
            }
            button.disabled = true;
        });

        setTimeout(() => {
            currentQuestionIndex++;
            if (currentQuestionIndex < quizQuestions[currentLanguage].length) {
                showQuestion();
            } else {
                showResult();
            }
        }, 1500);
    }

    function showResult() {
        quizBox.classList.add('hidden');
        resultBox.classList.remove('hidden');
        scoreElement.innerText = `${score} / ${quizQuestions[currentLanguage].length}`;
        if (score === quizQuestions[currentLanguage].length) {
            congratsModal.classList.remove('hidden');
        }
    }

    restartBtn.addEventListener('click', startQuiz);

    closeModalBtn.addEventListener('click', () => {
        congratsModal.classList.add('hidden')
    });

    const fetchBtn = document.getElementById('fetch-btn');
    const jokeSetupElement = document.getElementById('joke-setup');
    const jokePunchlineElement = document.getElementById('joke-punchline');
    const apiUrl = 'https://official-joke-api.appspot.com/random_joke';

    const getJoke = async () => {
        jokeSetupElement.textContent = translations[currentLanguage]['joke-fetching'];
        jokePunchlineElement.textContent = '';
        jokePunchlineElement.classList.remove('visible');
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('Could not fetch joke');
            }
            const data = await response.json();
            jokeSetupElement.textContent = data.setup;
            setTimeout(() => {
                jokePunchlineElement.textContent = `‚Äî ${data.punchline}`;
                jokePunchlineElement.classList.add('visible');
            }, 1200);
        } catch (error) {
            jokeSetupElement.textContent = translations[currentLanguage]['joke-error'];
            jokePunchlineElement.textContent = '';
        }
    };

    fetchBtn.addEventListener('click', getJoke);

    showPage('home');
    startQuiz();
});